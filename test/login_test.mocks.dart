// Mocks generated by Mockito 5.0.9 from annotations
// in movies_flutter/test/login_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i12;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movies_flutter/services/models/account.dart' as _i10;
import 'package:movies_flutter/services/models/discover/discover_movies.dart'
    as _i6;
import 'package:movies_flutter/services/models/genres.dart' as _i7;
import 'package:movies_flutter/services/models/movie.dart' as _i3;
import 'package:movies_flutter/services/models/movie_credits.dart' as _i4;
import 'package:movies_flutter/services/models/popular_movies.dart' as _i2;
import 'package:movies_flutter/services/models/popular_tv.dart' as _i5;
import 'package:movies_flutter/services/models/session.dart' as _i9;
import 'package:movies_flutter/services/models/session_request.dart' as _i14;
import 'package:movies_flutter/services/models/token.dart' as _i8;
import 'package:movies_flutter/services/tmdb_service.dart' as _i13;
import 'package:movies_flutter/utils/auth_store.dart' as _i11;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakePopularMovies extends _i1.Fake implements _i2.PopularMovies {}

class _FakeMovie extends _i1.Fake implements _i3.Movie {}

class _FakeCredits extends _i1.Fake implements _i4.Credits {}

class _FakePopularTv extends _i1.Fake implements _i5.PopularTv {}

class _FakeDiscoverMovies extends _i1.Fake implements _i6.DiscoverMovies {}

class _FakeGenres extends _i1.Fake implements _i7.Genres {}

class _FakeToken extends _i1.Fake implements _i8.Token {}

class _FakeSession extends _i1.Fake implements _i9.Session {}

class _FakeAccount extends _i1.Fake implements _i10.Account {}

/// A class which mocks [AuthStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthStore extends _i1.Mock implements _i11.AuthStore {
  MockAuthStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<String?> getSessionId() =>
      (super.noSuchMethod(Invocation.method(#getSessionId, []),
          returnValue: Future<String?>.value()) as _i12.Future<String?>);
  @override
  _i12.Future<void> setSessionId(String? value) =>
      (super.noSuchMethod(Invocation.method(#setSessionId, [value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i12.Future<void>);
}

/// A class which mocks [TmdbService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTmdbService extends _i1.Mock implements _i13.TmdbService {
  MockTmdbService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i2.PopularMovies> getPopularMovies() => (super.noSuchMethod(
          Invocation.method(#getPopularMovies, []),
          returnValue: Future<_i2.PopularMovies>.value(_FakePopularMovies()))
      as _i12.Future<_i2.PopularMovies>);
  @override
  _i12.Future<_i3.Movie> getMovie(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovie, [id]),
              returnValue: Future<_i3.Movie>.value(_FakeMovie()))
          as _i12.Future<_i3.Movie>);
  @override
  _i12.Future<_i4.Credits> getMovieCredits(int? movieId) =>
      (super.noSuchMethod(Invocation.method(#getMovieCredits, [movieId]),
              returnValue: Future<_i4.Credits>.value(_FakeCredits()))
          as _i12.Future<_i4.Credits>);
  @override
  _i12.Future<_i5.PopularTv> getPopularTvShows() =>
      (super.noSuchMethod(Invocation.method(#getPopularTvShows, []),
              returnValue: Future<_i5.PopularTv>.value(_FakePopularTv()))
          as _i12.Future<_i5.PopularTv>);
  @override
  _i12.Future<_i6.DiscoverMovies> discoverMovies() => (super.noSuchMethod(
          Invocation.method(#discoverMovies, []),
          returnValue: Future<_i6.DiscoverMovies>.value(_FakeDiscoverMovies()))
      as _i12.Future<_i6.DiscoverMovies>);
  @override
  _i12.Future<_i7.Genres> getMovieGenres() =>
      (super.noSuchMethod(Invocation.method(#getMovieGenres, []),
              returnValue: Future<_i7.Genres>.value(_FakeGenres()))
          as _i12.Future<_i7.Genres>);
  @override
  _i12.Future<_i8.Token> getNewToken() =>
      (super.noSuchMethod(Invocation.method(#getNewToken, []),
              returnValue: Future<_i8.Token>.value(_FakeToken()))
          as _i12.Future<_i8.Token>);
  @override
  _i12.Future<_i9.Session> newSession(_i14.SessionRequest? request) =>
      (super.noSuchMethod(Invocation.method(#newSession, [request]),
              returnValue: Future<_i9.Session>.value(_FakeSession()))
          as _i12.Future<_i9.Session>);
  @override
  _i12.Future<_i10.Account> account(String? sessionId) =>
      (super.noSuchMethod(Invocation.method(#account, [sessionId]),
              returnValue: Future<_i10.Account>.value(_FakeAccount()))
          as _i12.Future<_i10.Account>);
}
